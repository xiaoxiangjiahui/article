package com.csu.controller;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.RandomStringUtils;
import org.apache.lucene.analysis.it.ItalianAnalyzer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpRequest;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.csu.entity.Article;
import com.csu.entity.ArticlePath;
import com.csu.entity.ArticleUserGroup;
import com.csu.entity.Author;
import com.csu.entity.HeaderInfo;
import com.csu.service.ArticleService;
import com.csu.service.CommentService;
import com.csu.service.ElasticsearchService;
import com.csu.service.GrobidService;
import com.csu.service.GroupUserService;
import com.csu.service.MailSenderService;
import com.csu.service.UserService;
import com.csu.service.impl.XmlProcessServiceImpl;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;


//主要私人文献库的页面展示
@RequestMapping("personal")
@Controller
public class PersonalController {
    @Autowired
    ArticleService articleService;
    @Autowired
    GroupUserService groupUserService;
    @Autowired
    CommentService commentService;
    @Autowired
    ElasticsearchService elasticsearchService;
    @Autowired
    GrobidService grobidService;
    @Autowired
    MailSenderService mailSenderService;
    @Autowired
    UserService userService;
    
	@RequestMapping(value="index")
	public String personalLibrary(HttpSession httpSession,Model model){
		//个人的文献展示
		if(httpSession.getAttribute("userId") == null)
			return "redirect:../login";
		String userId = httpSession.getAttribute("userId").toString();
		int groupId = groupUserService.getPersonalGroupId(userId);
		
		PageHelper.startPage(1,10);
		if(articleService.countArticle(groupId)>0) {
			List<Article> articles = articleService.listArticle(groupId);
			int totalArticles = (int) new PageInfo<>(articles).getTotal();
			model.addAttribute("totalArticles", totalArticles);
			model.addAttribute("articles", articles);
		}							
		return "index";
	}
	//选中文献的详细信息与评论
	@RequestMapping("showDetails")
	public @ResponseBody Article showDetails(@RequestParam("article_id")int articleId) {
		Article article = articleService.getArticle(articleId);
		return article;
	}
	
	//下载单个文献
	public ResponseEntity<byte[]> downloadSingleFile(int articleId) throws IOException{
		ArticlePath articlePath = articleService.getArticlePath(articleId);
		String fileName = articleService.getArticle(articleId).getTitle();
		String filePath = articlePath.getArticlePath();
		if (filePath != null) {
			File file = new File(filePath);
			if (file.exists()) {
				ResponseEntity<byte[]> fileEntity = articleService.download(fileName,file);
				return fileEntity;
			}
		}
		return null;
	}
	
	//批量下载文献
	@RequestMapping("downloadArticles")
    public ResponseEntity<byte[]> downloadArticles(@RequestBody @RequestParam("selectedData[]") int[] articleIds) throws ServletException, IOException {				
    	ResponseEntity<byte[]> fileEntity = articleService.downloadBatch(articleIds);
		return fileEntity;
    }
			
	//上传文献到服务器
	@RequestMapping(value="uploadSubmit",method=RequestMethod.POST)
	public String uploadSubmit(HttpServletRequest request,HttpSession session) throws Exception{
		String userId = session.getAttribute("userId").toString();
		int groupId = groupUserService.getPersonalGroupId(userId);
		if(request instanceof MultipartHttpServletRequest) {
			List<MultipartFile> files = ((MultipartHttpServletRequest)request).getFiles("file_upload");
			while(!files.isEmpty()) {
				String name = RandomStringUtils.randomAlphanumeric(10);
				String articleName = name + ".pdf";
				String filePath = request.getServletContext().getRealPath("/pdf") + articleName;//获得上传文献的绝对路径
				File newFile = new File(filePath);
				files.get(0).transferTo(newFile);
				//grobid处理
				String xmlString = grobidService.grobidProcess(filePath);
				//xml process
				XmlProcessServiceImpl xmlProcessServiceImpl = new XmlProcessServiceImpl();
			    xmlProcessServiceImpl.process(xmlString);
			    //stored data process
			    HeaderInfo headerInfo = xmlProcessServiceImpl.getHeaderInfo();
			    String title = headerInfo.getTitle();
			    List<Author> authors = new ArrayList<>();
			    authors = xmlProcessServiceImpl.getAuthors();
			    String abstracts = headerInfo.getAbstracts();
			    String authorName = "";
			    String authorInstitude = "";
			    for(Author author : authors) {
			        authorName = author.getName()+","+authorName;
			        authorInstitude = author.getInstitution()+","+authorInstitude;
			    }
			    SimpleDateFormat sdFormat = new SimpleDateFormat("yyyy-MM-dd");
			    String articleDate = sdFormat.format(new Date());
			    articleDate = articleDate.replaceAll("-", "");
			    Article article = new Article();
			    article.setArticleDate(articleDate);
			    article.setTitle("unknown");
			    article.setAddress("unknown");
			    article.setAuthor("unknown");
			    article.setAbstracts("unknow");
			    if(!(authorInstitude==null))
			        article.setAddress(authorInstitude);      	
			    if(!(authorName==null))
			        article.setAuthor(authorName);
			    if(!(title==null))
			        article.setTitle(title);
			    if(!(title==null))
			        article.setAbstracts(abstracts);
			    article.setElasticsearchId("0");
				//对mysql数据库进行增加
				//t_article
				articleService.addArticle(article);
			    int mysqlId = article.getArticleId();
				//t_articlePath
				ArticlePath articlePath = new ArticlePath();
				articlePath.setArticlePath(filePath);
				articlePath.setArticleId(mysqlId);
				articleService.addArticlePath(articlePath);
				//t_article_user_group
				ArticleUserGroup articleUserGroup =new ArticleUserGroup();
				articleUserGroup.setArticleId(mysqlId);
				articleUserGroup.setGroupId(groupId);
				articleUserGroup.setUserId(userId);
				articleService.addArticleUserGroup(articleUserGroup);
				//存储到ES
				elasticsearchService.addArticleToES(filePath, mysqlId);
				files.remove(0);
			}
		}
		return "redirect:/personal/personalLibrary";
	}
	
	//ES的搜索
	@RequestMapping(value="searchSubmit",method=RequestMethod.POST)
	public String searchArticle(String keywords,Model model,HttpSession session){
		String userId = session.getAttribute("userId").toString();
		int groupId = groupUserService.getPersonalGroupId(userId);
		List<Integer> articleIds = elasticsearchService.searchForArticleId(keywords);
		articleIds = articleService.filterArticleFromgroup(articleIds, groupId);
		PageHelper.startPage(1,10);
		List<Article> searchArticles = new ArrayList<Article>();
		while(!articleIds.isEmpty()){
			int articleId = articleIds.get(0);
			articleIds.remove(0);
			searchArticles.add(articleService.getArticle(articleId));
		}
		int totalSearchArticles = (int) new PageInfo<>(searchArticles).getTotal();
		model.addAttribute("totalArticles", totalSearchArticles);
		model.addAttribute("articles", searchArticles);
		return "personalLibrary";
	}	
	
	//批量删除
	@RequestMapping("personalDeleteSubmit")	
	public @ResponseBody void deleteSubmit(@RequestBody @RequestParam(value="selectedData[]")String[] articleIdString){
		for(String articleId :articleIdString) {
			articleService.deleteArticle(Integer.valueOf(articleId));
			elasticsearchService.deleteArticleFromES(Integer.valueOf(articleId));
		}			
	}
	
	//编辑修改详细信息
	@RequestMapping("editDetails")
	public @ResponseBody void editDetails(@RequestBody @RequestParam("articleId") int articleId,
			@RequestBody @RequestParam("title") String title,
			@RequestBody @RequestParam("author") String author,
			@RequestBody @RequestParam("abstracts") String abstracts,
			@RequestBody @RequestParam("address") String address) {
		Article article = new Article();
		article.setAbstracts(abstracts);
		article.setAddress(address);
		article.setAuthor(author);
		article.setTitle(title);
		article.setArticleId(articleId);
		articleService.updateArticle(article);
	}
	
	@RequestMapping("recommendArticle")
	public @ResponseBody boolean recommendArticle(@RequestParam("userIds")String userIdString,HttpSession session,@RequestParam("articleId")int articleId) {
		boolean isSuccess = true;
		//parse userId
		String recommender = session.getAttribute("userId").toString();
		String recommenderName = userService.getUserName(recommender);
		String articleTitle = articleService.getArticle(articleId).getTitle();
		String[] userIds = userIdString.split(";");
		String contentText;
		for(String userId : userIds) {
			if(userService.getUserName(userId).isEmpty()) {
				isSuccess = false;
				break;
			}
			contentText = "Hello!" + recommenderName + " recommend a article to you:" + articleTitle;
			mailSenderService.sendEmail(userId, contentText);
			ArticleUserGroup articleUserGroup = new ArticleUserGroup();
			articleUserGroup.setArticleId(articleId);
			int groupId = groupUserService.getPersonalGroupId(userId);
			articleUserGroup.setGroupId(groupId);
			articleUserGroup.setUserId(userId);
			articleService.addArticleUserGroup(articleUserGroup);
		}
		return isSuccess;
	}

}
