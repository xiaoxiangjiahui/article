package com.csu.controller;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.RandomStringUtils;
import org.apache.lucene.analysis.it.ItalianAnalyzer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpRequest;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.csu.entity.Article;
import com.csu.entity.ArticlePath;
import com.csu.entity.ArticleUserGroup;
import com.csu.entity.Author;
import com.csu.entity.HeaderInfo;
import com.csu.service.ArticleService;
import com.csu.service.CommentService;
import com.csu.service.ElasticsearchService;
import com.csu.service.GrobidService;
import com.csu.service.GroupUserService;
import com.csu.service.MailSenderService;
import com.csu.service.UserService;
import com.csu.service.impl.XmlProcessServiceImpl;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;


@RequestMapping("personal")
@Controller
public class UploadArticleController {
	@Autowired
    ArticleService articleService;
    @Autowired
    GroupUserService groupUserService;
    @Autowired
    CommentService commentService;
    @Autowired
    ElasticsearchService elasticsearchService;
    @Autowired
    GrobidService grobidService;
    @Autowired
    MailSenderService mailSenderService;
    @Autowired
    UserService userService;
    
    
    @RequestMapping(value="nav_uploadfile")
	public String nav_uploadfile(HttpSession httpSession,Model model){
    	if(httpSession.getAttribute("account") == null)
			return "redirect:../login";
		return "nav_uploadfile";
	}
    //上传文献到服务器
  	@RequestMapping(value="uploadSubmit",method=RequestMethod.POST)
  	public @ResponseBody Article uploadSubmit(HttpServletRequest request,HttpSession session) throws Exception{
  		String userId = session.getAttribute("account").toString();
  		int groupId =(int) session.getAttribute("groupid");
 /* 		if(request instanceof MultipartHttpServletRequest) {
  			List<MultipartFile> files = ((MultipartHttpServletRequest)request).getFiles("file_upload");
  			while(!files.isEmpty()) {
  				String name = RandomStringUtils.randomAlphanumeric(10);
  				String articleName = name + ".pdf";
  				String filePath = request.getServletContext().getRealPath("/pdf") + articleName;//获得上传文献的绝对路径
  				File newFile = new File(filePath);
  				files.get(0).transferTo(newFile);
  				//grobid处理
  				String xmlString = grobidService.grobidProcess(filePath);
  				//xml process
  				XmlProcessServiceImpl xmlProcessServiceImpl = new XmlProcessServiceImpl();
  			    xmlProcessServiceImpl.process(xmlString);
  			    //stored data process
  			    HeaderInfo headerInfo = xmlProcessServiceImpl.getHeaderInfo();
  			    String title = headerInfo.getTitle();
  			    List<Author> authors = new ArrayList<>();
  			    authors = xmlProcessServiceImpl.getAuthors();
  			    String abstracts = headerInfo.getAbstracts();
  			    String authorName = "";
  			    String authorInstitude = "";
  			    for(Author author : authors) {
  			        authorName = author.getName()+","+authorName;
  			        authorInstitude = author.getInstitution()+","+authorInstitude;
  			    }
  			    //SimpleDateFormat sdFormat = new SimpleDateFormat("yyyy-MM-dd");
  			    Timestamp articleDate = (Timestamp) new Date();
  			    //articleDate = articleDate.replaceAll("-", "");
  			    Article article = new Article();
  			    article.setCreateTime(articleDate);
  			    article.setPtitle("unknown");
  			    article.setAddr("unknown");
  			    article.setAuthors("unknown");
  			    article.setPabstracts("unknow");
  			    if(!(authorInstitude==null))
  			        article.setAddr(authorInstitude);      	
  			    if(!(authorName==null))
  			        article.setAuthors(authorName);
  			    if(!(title==null))
  			        article.setPtitle(title);
  			    if(!(title==null))
  			        article.setPabstracts(abstracts);
  			    article.setEsId("0");
  				//对mysql数据库进行增加
  				//t_article
  				articleService.addArticle(article);
  			    int mysqlId = article.getPid();
  				//t_articlePath
  				ArticlePath articlePath = new ArticlePath();
  				articlePath.setArticlePath(filePath);
  				articlePath.setArticleId(mysqlId);
  				articleService.addArticlePath(articlePath);
  				//t_article_user_group
  				ArticleUserGroup articleUserGroup =new ArticleUserGroup();
  				articleUserGroup.setArticleId(mysqlId);
  				articleUserGroup.setGroupId(groupId);
  				articleUserGroup.setUserId(userId);
  				articleService.addArticleUserGroup(articleUserGroup);
  				//存储到ES
  				elasticsearchService.addArticleToES(filePath, mysqlId);
  				files.remove(0);
  			}
  		}*/
  		System.out.println(groupId);
  		Article article = articleService.getArticle(1);
  		System.out.println(article.getDoi());
  		return article;
  	}
  	@RequestMapping(value="removeArticle",method=RequestMethod.POST)
  	public @ResponseBody String removeArticle(HttpServletRequest request,HttpSession session,Model model) throws Exception{
  		System.out.println("remove...");
  		model.addAttribute("recieve", "recieve");
		return "1";
  	}
}
