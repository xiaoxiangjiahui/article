package com.csu.controller;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.RandomStringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.csu.entity.Article;
import com.csu.entity.ArticlePath;
import com.csu.entity.ArticleUserGroup;
import com.csu.entity.Author;
import com.csu.entity.HeaderInfo;
import com.csu.service.ArticleService;
import com.csu.service.ElasticsearchService;
import com.csu.service.GrobidService;
import com.csu.service.impl.XmlProcessServiceImpl;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;

@RequestMapping("public")
@Controller
public class PublicController {
	@Autowired
	private ArticleService articleService;
	@Autowired
	private ElasticsearchService elasticsearchService;
	@Autowired
	private GrobidService grobidService;
	
	@RequestMapping("publicLibrary")
	public String publicArticle(Model model,HttpSession session){
		PageHelper.startPage(1,15);
		List<Article> articles = new ArrayList<>();
		if(articleService.countArticle(1)>0)
			articles = articleService.listArticle(1);
		model.addAttribute("articles", articles);
		boolean isSuperAuthority = Boolean.parseBoolean(session.getAttribute("isSuperAuthority").toString());
		boolean deleteVisible = isSuperAuthority;
		model.addAttribute("deleteVisible", deleteVisible);
		return "publicLibrary";
	}
	
	//下载文献
	@RequestMapping("downloadFile")
	public ResponseEntity<byte[]> downloadFile(int articleId) throws IOException{
		ArticlePath articlePath = articleService.getArticlePath(articleId);
		String fileName = articleService.getArticle(articleId).getTitle();
		String filePath = articlePath.getArticlePath();
		if (filePath != null) {
			File file = new File(filePath);
			if (file.exists()) {
				ResponseEntity<byte[]> fileEntity = articleService.download(fileName, file);
				return fileEntity;
			}
			System.out.print("error in file is not exist");
		}
		return null;
	}
	
	//批量上传
	@RequestMapping(value="uploadBatchSubmit", method=RequestMethod.POST)
	public String uploadBatchSubmit(HttpServletRequest request,HttpSession session) throws Exception {
		if(request instanceof MultipartHttpServletRequest) {
			List<MultipartFile> files = ((MultipartHttpServletRequest)request).getFiles("file_upload");
			while(!files.isEmpty()) {
				String name = RandomStringUtils.randomAlphanumeric(10);
				String articleName = name + ".pdf";
				String filePath = request.getServletContext().getRealPath("/pdf") + articleName;//获得上传文献的绝对路径
				File newFile = new File(filePath);
				files.get(0).transferTo(newFile);
				//grobid处理
				String xmlString = grobidService.grobidProcess(filePath);
				//xml process
				XmlProcessServiceImpl xmlProcessServiceImpl = new XmlProcessServiceImpl();
			    xmlProcessServiceImpl.process(xmlString);
			    //stored data process
			    HeaderInfo headerInfo = xmlProcessServiceImpl.getHeaderInfo();
			    String title = headerInfo.getTitle();
			    List<Author> authors = new ArrayList<>();
			    authors = xmlProcessServiceImpl.getAuthors();
			    String abstracts = headerInfo.getAbstracts();
			    String authorName = "";
			    String authorInstitude = "";
			    for(Author author : authors) {
			        authorName = author.getName()+","+authorName;
			        authorInstitude = author.getInstitution()+","+authorInstitude;
			    }
			    SimpleDateFormat sdFormat = new SimpleDateFormat("yyyy-MM-dd");
			    String articleDate = sdFormat.format(new Date());
			    articleDate = articleDate.replaceAll("-", "");
			    Article article = new Article();
			    article.setArticleDate(articleDate);
			    article.setTitle("unknown");
			    article.setAddress("unknown");
			    article.setAuthor("unknown");
			    article.setAbstracts("unknow");
			    if(!(authorInstitude==null))
			        article.setAddress(authorInstitude);      	
			    if(!(authorName==null))
			        article.setAuthor(authorName);
			    if(!(title==null))
			        article.setTitle(title);
			    if(!(title==null))
			        article.setAbstracts(abstracts);
			    article.setElasticsearchId("0");
				//对mysql数据库进行增加
				//t_article
				articleService.addArticle(article);
			    int mysqlId = article.getArticleId();
				//t_articlePath
				ArticlePath articlePath = new ArticlePath();
				articlePath.setArticlePath(filePath);
				articlePath.setArticleId(mysqlId);
				articleService.addArticlePath(articlePath);
				//t_article_user_group
				ArticleUserGroup articleUserGroup =new ArticleUserGroup();
				String userId = session.getAttribute("userId").toString();
				articleUserGroup.setArticleId(mysqlId);
				articleUserGroup.setGroupId(1);
				articleUserGroup.setUserId(userId);
				articleService.addArticleUserGroup(articleUserGroup);
				//存储到ES
				elasticsearchService.addArticleToES(filePath, mysqlId);
				files.remove(0);
			}
		}		
		return "redirect:publicLibrary";
	}
	
	//es的搜索
	@RequestMapping("searchArticles")
	public String searchArticles(String keywords,Model model,HttpSession session){		
		List<Integer> articleIds = elasticsearchService.searchForArticleId(keywords);
		articleIds = articleService.filterArticleFromgroup(articleIds, 1);
		System.out.println(articleIds);
		PageHelper.startPage(1,10);
		List<Article> searchArticles = new ArrayList<Article>();
		while(!articleIds.isEmpty()){
			searchArticles.add(articleService.getArticle(articleIds.get(0)));
			articleIds.remove(0);
		}
		model.addAttribute("articles",searchArticles);
		boolean isSuperAuthority = Boolean.parseBoolean(session.getAttribute("isSuperAuthority").toString());
		boolean deleteVisible = isSuperAuthority;
		model.addAttribute("deleteVisible", deleteVisible);
		return "publicLibrary";
	}
	
	//delete article
	@RequestMapping(value="deleteArticle",method=RequestMethod.POST)
	public String deleteArticle(@RequestParam("articleId") int articleId) {	
		articleService.deleteArticle(articleId);
		return "redirect:publicLibrary";
	}

}
